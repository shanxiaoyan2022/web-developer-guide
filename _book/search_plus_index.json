{"./":{"url":"./","title":"Introduction","keywords":"","body":"Web 前端学习引导 面向非前端专业人群，产品经理、在校学生等。 暂不涉及 iOS/Android 原生 App 开发。 内容包括： html/css/javascript 基础 小程序、浏览器扩展 React/Vue 接口、http协议 文档写作 实践总结 联系方式 水色 shuiseshuise@hotmail.com 水色 all right reserved，powered by Gitbook修订： 2022-07-10 "},"prepare/":{"url":"prepare/","title":"准备工作","keywords":"","body":"准备工作 文档是会说话的代码，代码是能运行的文档。 只有做好了准备工作，才能在后续的学习中很纯粹的写代码。准备工作从 4 个方面入手： 代码仓库：云端代码备份，确保代码永不丢失 代码编辑工具：写代码的专业工作，有语法高亮、语法提示等功能 markdown：轻量文档编写工作，像写代码一样写文档，文档也应该像代码一样云端保存 代码运行环境：在本地电脑配置好运行环境，就可以在写代码的同时查看运行结果是否符合预期，可以在断网条件下继续学习 预期 时间及结果 水色 all right reserved，powered by Gitbook修订： 2022-07-14 "},"prepare/github.html":{"url":"prepare/github.html","title":"代码仓库","keywords":"","body":"代码仓库 Github 是多人协作开发工具，支持多人同时开发同一个项目，为满足多人大型项目的不断迭代，提供了各种代码管理方式。 对于初学者而言，只需要掌握 Github 最基本的操作即可，简单说就是在服务器端为项目创建仓库，不断提交本地编写的代码。 主要有 git clone：克隆已有仓库 git add：添加修改内容 git commit：添加修改备注 git push：提交代码到服务器 git pull：从服务器拉取代码，多人协作或换电脑时需要 官方相关文档： 注册账号 https://docs.github.com/cn/get-started/signing-up-for-github/signing-up-for-a-new-github-account 安装配置桌面版软件 https://docs.github.com/cn/desktop/installing-and-configuring-github-desktop 官方快速入门 https://docs.github.com/cn/get-started/quickstart/hello-world 添加和克隆仓库 https://docs.github.com/cn/desktop/contributing-and-collaborating-using-github-desktop/adding-and-cloning-repositories/adding-a-repository-from-your-local-computer-to-github-desktop 修改提交 https://docs.github.com/cn/desktop/contributing-and-collaborating-using-github-desktop/managing-commits/amending-a-commit 词汇表 https://docs.github.com/cn/get-started/quickstart/github-glossary 提交方法 项目一般都是多个文件，一定出于某个目才会修改代码，而为了达成某个目的，经常需要修改多个文件，甚至还会增删文件、重命名文件等。因此推荐以事件为单位组织提交，事件 A 修改了文件 1，事件 B 修改了文件 1、2、3，正确的操作方式为： 先修改文件 1 完成事件 A，添加修改，在说明中填写修改原因，即事件 A，如果事件 A 有说明链接，一并写入 继续修改文件 1、2、3，添加修改，在说明中写入事件 B 并附加链接 这样做的好处是避免文件变动带来的影响，回溯记录时，可以按照具体的活动顺序管理，更符合事情的实际情况。 gitignore 的配置使用 本地开发时，项目文件夹中会有很多真正代码之外的文件，可能有编辑工具生成的，也可能有开发临时需要的一些文件，这些文件都不会作为最终文件发布，也无须进行备份，因此需要在提交时进行过滤。 gitignore 可以方便的过滤不需要备份的文件，具体做法是在项目根目录创建一个名字为 .gitignore 文件，文件名看着有点怪，但一定不能做任何修改。 创建后用代码编辑工具打开文件填写内容，示例如下，支持 * 通配符，# 为注释语法： node_modules dist dist-ssr *.local # Editor directories and files .vscode/* !.vscode/extensions.json .idea .DS_Store *.suo *.ntvs* *.njsproj *.sln *.sw? 注意事项： 和分支、tag 相关的部分可跳过，先尽快掌握代码提交保存 一个项目一个仓库，仓库之前保持隔离，不可交叉 先在服务器端创建好仓库，再同步到本地添加代码 必须掌握的操作，创建单独项目训练，切忌在正式的项目中进行未知操作 扩展阅读： Git提交日志规范 https://cloud.tencent.com/developer/article/1404933 Commit message 和 Change log 编写指南 https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html 简明教程 https://www.runoob.com/w3cnote/git-guide.html Github Docs https://docs.github.com/cn/get-started/getting-started-with-git/ignoring-files 水色 all right reserved，powered by Gitbook修订： 2022-07-10 "},"prepare/editor.html":{"url":"prepare/editor.html","title":"代码编辑器","keywords":"","body":"代码编辑工具 sublime text https://www.sublimetext.com/ visual studio code https://code.visualstudio.com/docs#vscode 均为免费工具，均支持插件，任选其一安装 推荐 sublime text，这是作者的默认工具，为后续课程的默认工具 工程文件夹 打开侧边栏，添加项目文件夹到编辑器，可以在编辑器左侧查找及切换文件 推荐阅读： sublime text 插件安装 https://zhuanlan.zhihu.com/p/91942738 sublime text 插件精选（Emmet） https://zhuanlan.zhihu.com/p/52545760 sublime text 使用手册 https://www.w3cschool.cn/sublimetext/ 水色 all right reserved，powered by Gitbook修订： 2022-07-10 "},"prepare/markdown.html":{"url":"prepare/markdown.html","title":"文档编写","keywords":"","body":"markdown 与文档工具 推荐使用 markdown 编写文档，markdown 后续简称 md，可以边了解边写，不熟悉可参考下方示例。 markdown 语法 https://markdown.tw/ 编写工具 typora https://typora.io/ markdown 扩展之流程图 https://mermaid-js.github.io/mermaid/ 基于 md 的文档管理 gitbook http://www.zhaowenyu.com/gitbook-doc/manual/book-json.html markdown 示例： 基础语法 https://github.com/shuise/web-developer-guide/blob/main/prepare/res/example.md 流程图 https://github.com/shuise/web-developer-guide/blob/main/prepare/res/flow.md 规范建议： 文件夹使用字母、数字及 - _ 的组合，字母全小写 文件名同文件夹 中英文混排，英文单词两端加半角空格 无需首行缩进 推荐阅读： 少数派写作指南 https://sspai.com/post/37815 中文排版 https://github.com/mzlogin/chinese-copywriting-guidelines 中英文混排的 “Social Distancing” https://blog.imfing.com/2020/05/chinese-typesetting-space/ Sun MicroSystems 公司 Java 语言规范 https://waylau.com/java-code-conventions/page01.html 水色 all right reserved，powered by Gitbook修订： 2022-07-14 "},"prepare/web-server.html":{"url":"prepare/web-server.html","title":"运行环境","keywords":"","body":"代码运行环境 代码需要在本地编写调试、预览看效果，因此除了编写工具外，还需要运行环境（nodejs + svrx）和访问软件（浏览器）。 安装 nodejs http://nodejs.cn/ ，svrx https://www.npmjs.com/package/@svrx/svrx 浏览器可使用 firefox/safari/chrome，推荐 chrome 严格注意：所以前端的预览调试必须在 http(s) 协议下 打开地址栏，确保是以 http 开头，而不是 file:// 相对路径与绝对路径 代码需要引用其他资源，比如页面引用 css、js、图片/视频等文件，css 引用背景图片等。 这就设计路径问题，本地计算机的路径一般为 /Users/shuise/web-developer-guide/basic/res 或 files:///d:/shuise/web-developer-guide/basic/res，这些路径只在本地有效，代码部署到服务器端就会时效，因为服务器是不可能保持本地文件树架构。 解决这个问题就是靠站点，基于本地某个 目录 S运行 svrx 服务，就等于指定 目录 S 为网站根目录，开发完成后把 目录 S 部署到服务器并指定为根目录，即可保持远端与本地的一致性。 因此，在写代码时，不允许引用 目录 S 之外的其他本地文件，所有用到的文件必须复制到 目录 S 下后再引用。 引用路径规则如下： 绝对路径：以 / 开始，代表从根目录开始查找，比如 \"，适用于全站导航、favicon 等少量全局固定文件，当前文件在任意位置均可引用； 相对路径：以 ./(当前目录) 或 ../（父级目录） 开始，相对当前文件开始查找，比如 ，代表与页面平级 src 目录下的图片 xxx，默认路径规则，现代工程中一般分模块处理，每个模块单独管理自身独有的所有资源。 推荐阅读： nodejs 的包安装方式 npm http://nodejs.cn/learn/an-introduction-to-the-npm-package-manager svrx https://svrxjs.github.io/svrx-docs/zh/ firefox 下载地址 https://www.mozilla.org/en-US/firefox/new/?redirect_source=firefox-com chrome 下载地址 https://www.google.com/chrome/ safari 为苹果电脑自带 水色 all right reserved，powered by Gitbook修订： 2022-07-14 "},"basic/":{"url":"basic/","title":"基础入门","keywords":"","body":"基础入门引导 代码与文档是分别由计算机语言和人类语言的写作，都是用来沟通，首先要写出让别人看明白的代码，这个别人也可能是不久后的自己。 1. 通用注意事项 文件名不能使用中文、空格或特殊字符，推荐使用数字、字母（全小写）及 -(或 _ ) 排序方式，如果是两位数，应该是 01/02………………99，才能保证正常顺序 开始写代码多写注释，可通过注释提供文档链接 文档和注释主要用来补充代码无法表达的背景及设计思想等，与代码同等重要，要养成先写文档注释再写代码的习惯 每天结束时提交保存当天代码，避免丢失 2. 概要 在浏览器中，主要通过 html、css 与 javascript 控制页面所能看到和操作的一切，大概的分工说明： html 负责结构化数据输出 css 负责描述 html 长什么样子，如果没有 css，浏览器会采用内置的规则决定 html 最终的样子 javascript 可以访问页面所处环境，可以捕获键盘、鼠标等外设，并且可以修改 html 及 css 内容，因此页面可以根据各种操作作出交互效果 水色 all right reserved，powered by Gitbook修订： 2022-07-14 "},"basic/html.html":{"url":"basic/html.html","title":"html","keywords":"","body":"html 基础 作业：将 word示例 转化为网页 目标： 了解 html 基础逻辑 https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics 了解 html 标签，熟练记忆常用标签的语义及属性 https://www.w3school.com.cn/tags/index.asp 理解「表现」与「结构」分离 http://www.w3cn.org/article/tips/2004/43.html 能熟练写出合理的「结构」 html 文件结构 测试页面 第 1 行固定声明文档类型，直接使用即可，暂不解释 第 2 行文档开始，对应第 10 行文件结束 第 3 行为头部开始，对应第 6 行结束，头部会引用资源，声明编码及 meta 等，后续单独解释，连续阶段只使用 title 即可 第 7 行为内容区开始，对应 第 9 行结束，html 代码需要写入 body 之间 讲解 HTML 不是一门编程语言，而是一种用于定义内容结构的标记语言。HTML 由一系列的元素（elements）组成，这些元素可以用来包围不同部分的内容，使其以某种方式呈现或者工作。一对标签（ tags）可以为一段文字或者一张图片添加超链接等。 大标题 子标题 匠人制造工具，直至被后人用于惶惶战争，以武器之名为世所知。 一个人有两个我，一个在黑暗里醒着，一个在光明中睡着。我是烈火，我也是枯枝，一部分的我消耗了另一部分的我。 这是一段纯内展示 html 示例， 是标签，标签之间的代码属于标签内容，可以是一段 html，比如 div.content，也可以是纯文字 h1； contenteditable=\"true\"> 之间的键值对是标签 div 的属性，不同标签具有不同的属性，不同属性有不同的取值方式； div.content 包含 3 个标签，一般说有 3 个子节点，分别为 h1、h2 与 div.digest，在写代码时，每深入一个层级，就通过一个 tab 键缩进，通过视觉可以非常方便的了解结构。以此类推，div.digest 拥有两个子节点，均为 p 标签。 什么表现、结构分离？ 网页都是以某种风格展示，展示某些信息、提供某些操作。我们上网时就是通过鼠标键盘不断操作不断阅读。经常访问的网站时不时还会变个样子。 我们访问网页时要阅读获取的信息就是内容，为了提高阅读的体验，会把内容按照一定的结构处理，比如文章一般分为标题、摘要、发布时间、封面图、摘要、作者、正文、评论区等，不同结构对应不同的标签，按照某类内容设计好结构后，就可以分离出来变成模板，用来处理更多同类的信息。 这是一个体验的年代，光有结构还不够好，标题该多大？居左居右还是居中？是否加粗？什么颜色？段落首行缩进还是首字悬浮？段落间距多大？行距多少？封面图是否加边框？诸如此类的问题还需要专业设计进行排版处理。这些都属于表现层，web 前端约定表现层统一写入 css。 这么做的好处是把复杂文档（想想写 word，边写边排版）分离成两个较为简单的构成，分工为两个角色各自专业工作，效率高且能适应快速变化。内容生产者可以专注于内容本身，设计师可以专注于 UI，调整设计时直接更新 css 文件，两者各自独立互不影响。 容易混淆的表现与结构： logo图标：属于表现，对应的结构是公司名称 所有边框类：图片边框、表格边框、按钮边框、输入框边框等 纯图标按钮：图标属于表现，结构为按钮 + 文字，只是后期通过 css 把文字隐藏、显示了图标 斜体、粗体、下划线、删除线等 回行 撰写 html 代码的思路 要了解清楚所有，至少是常见标签的语义，在使用时才知道有哪些可选项，比如 h1 一级标题、table 表格、ul 无序列表、ol 有序列表、dl 定义列表等等 不明确语义的大结构使用 div，不明确语义的少量文字用 span 标签语义较弱，又只能选用，经常无法完美表达本意，可通过 class 做补充，比如讲解中的 div.digest ，class 是自定义的，可以完全按照数据结构逻辑描述 理解文档或设计稿的结构，分离出纯粹的内容结构，撰写 html 推荐阅读： LaTex 的内容与样式分离 https://liam.page/2019/03/18/separation-of-content-and-presentation/ MVC https://zhuanlan.zhihu.com/p/35680070 MVC https://www.runoob.com/design-pattern/mvc-pattern.html 水色 all right reserved，powered by Gitbook修订： 2022-07-14 "},"basic/css.html":{"url":"basic/css.html","title":"css","keywords":"","body":"css 基础 作业：按照设计稿美化之前的 html 目标： css 基础 https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/CSS_basics 掌握常用的 css 选择器用法 https://www.w3school.com.cn/css/index.asp 掌握布局方法 https://www.runoob.com/css/css-website-layout.html 能制作简单的平移、缩放、旋转等动画 https://www.runoob.com/css3/css3-animations.html 讲解： 准备工作：在之前 html 文件的 head 之间贴入代码 ，根据实际位置写入文件路径，在 css 文件中写样式。 .digest { border: 1px solid #ccc; padding: 10px; color: #333; } .digest 叫选择器，指的是 css 选择页面中的节点，对应页面中的 class=\"digest\"，与具体标签无关 {} 为固定语法，{} 之间写入 css 规则，建议每行一个，格式为 css rule: value，必须 ; 结尾 css 规则解释 👇🏻作用域 .a .b {} // 注意 .a 与 .b 之间有半角空格 //生效 //生效 //不生效 👇🏻锁定标签，不推荐使用 div.a{} //生效 //不生效 👇🏻双 class 锁定，不推荐使用 .a.b{} // 注意 .a 与 .b 紧贴，没有半角空格 //生效 //不生效 👇🏻css 合并及覆盖 .a { color: #ccc; font-size:12px; } .a { border: 1px solid #cd0000; font-size:14px; } //等效 .a { color: #ccc; border: 1px solid #cd0000; // .a 同名合并 font-size: 14px; //后面覆盖前面 } 👇🏻深度优先，选择器定义的深度具有优先级，也就是说，选择器越精准，越具有优先权 .c { font-size: 12px; } .a .c { font-size: 14px; } 这里文字最终显示为 14px 👇🏻多选择器同时定义 .a, .b { font-size: 14px; } //等同于 .a { font-size: 14px; } .b { font-size: 14px; } 这里文字最终显示为 14px 这里文字也是 14px 注意事项： 推荐只使用 class，class 不得以数字或特殊字符开头 不使用 id，因为 id 在页面需要保持唯一，id 定义的 css 难以复用 命名方式推荐 bem 规则 https://juejin.cn/post/6844903672162304013 css 代码都分离成独立的文件引用 水色 all right reserved，powered by Gitbook修订： 2022-07-14 "},"basic/javascript.html":{"url":"basic/javascript.html","title":"javascript","keywords":"","body":"javascript 基础 目标： 了解事件及监听 掌握变量定义、作用域及函数定义 掌握点击弹出、鼠标经过变色等常见交互的开发 推荐阅读： 函数及传参 https://www.runoob.com/js/js-functions.html 事件 https://www.runoob.com/js/js-events.html 作用域 https://www.runoob.com/js/js-scope.html dom https://www.runoob.com/js/js-htmldom-html.html dom css https://www.runoob.com/js/js-htmldom-css.html 水色 all right reserved，powered by Gitbook修订： 2022-07-14 "},"senior/web-component.html":{"url":"senior/web-component.html","title":"组件","keywords":"","body":"Web 组件 1. 功能性标签 form 系列 2. 自定义标签 let node = document.createElement('myTagName'); node.innerText = \"string...\"; node.className = \"xxxx\"; 3. shadow dom 4. 组件开发 x-bricks 水色 all right reserved，powered by Gitbook修订： 2022-06-30 "},"projects.html":{"url":"projects.html","title":"精选前端开源项目","keywords":"","body":"精选前端开源项目 类 notion 块编辑器 https://github.com/shuise/block-editor vue 流程图 https://github.com/bcakmakoglu/vue-flow web clipper 支持 Notion,OneNote,Bear,Yuque,Joplin https://github.com/webclipper/web-clipper 网页内容提取 https://github.com/mozilla/readability js ppt https://github.com/SheetJS/js-ppt iPad 生产力指南 https://github.com/bluebird2046/iPad-Pro-Productivity 对开发人员有用的定律、理论、原则和模式 https://github.com/nusr/hacker-laws-zh 程序员做饭指南 https://github.com/Anduin2017/HowToCook 水色 all right reserved，powered by Gitbook修订： 2022-06-30 "}}